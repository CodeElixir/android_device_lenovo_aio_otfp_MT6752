commit 955eddaf9afb041a9ee08a6ebe2c21e70c671893
Author: GSandeep96 <14311a0431@sreenidhi.edu.in>
Date:   Mon Feb 20 19:30:09 2017 +0530

    [PATCH] Add the xlog function __xlog_buf_printf() and override the RLOG,Bypass selinux etc..

diff --git a/init/init.cpp b/init/init.cpp
index 9992b4784..4255fc759 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -85,7 +85,11 @@ int have_console;
 std::string console_name = "/dev/console";
 static time_t process_needs_restart;
 
-const char *ENV[32];
+//const char *ENV[32];
+
+// xen0n: some MTK services (e.g. ril-daemon-mtk) require very large number
+// of sockets, which can't be contained in 32 entries minus other variables.
+const char *ENV[64];
 
 bool waiting_for_exec = false;
 
@@ -434,6 +438,7 @@ static void selinux_init_all_handles(void)
     sehandle_prop = selinux_android_prop_context_handle();
 }
 
+#if 0
 enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
 static selinux_enforcing_status selinux_status_from_cmdline() {
@@ -447,11 +452,13 @@ static selinux_enforcing_status selinux_status_from_cmdline() {
 
     return status;
 }
+#endif
 
 static bool selinux_is_enforcing(void)
 {
     if (ALLOW_PERMISSIVE_SELINUX) {
-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+       // return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+        return false;   
     }
     return true;
 }
diff --git a/init/init.h b/init/init.h
index 345d442c0..ceb18dea4 100644
--- a/init/init.h
+++ b/init/init.h
@@ -24,7 +24,8 @@ class Service;
 
 #define COMMAND_RETRY_TIMEOUT 5
 
-extern const char *ENV[32];
+//extern const char *ENV[32];
+extern const char *ENV[64];
 extern bool waiting_for_exec;
 extern int have_console;
 extern std::string console_name;
diff --git a/init/service.cpp b/init/service.cpp
index 76e0bc876..742430483 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -371,12 +371,14 @@ bool Service::Start() {
             scon = ret_scon;
             free(ret_scon);
         }
+    #if 0
         if (rc == 0 && scon == mycon) {
             ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
             free(mycon);
             free(fcon);
             return false;
         }
+    #endif
         free(mycon);
         free(fcon);
         if (rc < 0) {
diff --git a/liblog/logger_write.c b/liblog/logger_write.c
index c7b5a8415..7dd08e821 100644
--- a/liblog/logger_write.c
+++ b/liblog/logger_write.c
@@ -31,10 +31,13 @@
 #include <private/android_filesystem_config.h>
 #include <private/android_logger.h>
 
+#ifndef FAKE_LOG_DEVICE
+#include <sys/system_properties.h>
+#endif
+
 #include "config_write.h"
 #include "log_portability.h"
 #include "logger.h"
-
 #define LOG_BUF_SIZE 1024
 
 static int __write_to_log_init(log_id_t, struct iovec *vec, size_t nr);
@@ -389,28 +392,35 @@ LIBLOG_ABI_PUBLIC int __android_log_buf_write(int bufID, int prio,
                                               const char *tag, const char *msg)
 {
     struct iovec vec[3];
-    char tmp_tag[32];
+    char tmp_tag[32]="0";
 
     if (!tag)
         tag = "";
 
     /* XXX: This needs to go! */
     if ((bufID != LOG_ID_RADIO) &&
-         (!strcmp(tag, "HTC_RIL") ||
-        !strncmp(tag, "RIL", 3) || /* Any log tag with "RIL" as the prefix */
-        !strncmp(tag, "IMS", 3) || /* Any log tag with "IMS" as the prefix */
-        !strcmp(tag, "AT") ||
-        !strcmp(tag, "GSM") ||
-        !strcmp(tag, "STK") ||
-        !strcmp(tag, "CDMA") ||
-        !strcmp(tag, "PHONE") ||
-        !strcmp(tag, "SMS"))) {
-            bufID = LOG_ID_RADIO;
-            /* Inform third party apps/ril/radio.. to use Rlog or RLOG */
-            snprintf(tmp_tag, sizeof(tmp_tag), "use-Rlog/RLOG-%s", tag);
-            tag = tmp_tag;
+	(!strcmp(tag, "HTC_RIL") ||
+	 !strncmp(tag, "RIL", 3) || /* Any log tag with "RIL" as the prefix */
+	 !strncmp(tag, "IMS", 3) || /* Any log tag with "IMS" as the prefix */
+	 !strcmp(tag, "AT") ||
+	 !strcmp(tag, "GSM") ||
+	 !strcmp(tag, "STK") ||
+	 !strcmp(tag, "CDMA") ||
+	 !strcmp(tag, "PHONE") ||
+	 !strcmp(tag, "SMS"))) {
+	bufID = LOG_ID_RADIO;
+	/* Inform third party apps/ril/radio.. to use Rlog or RLOG */
+	snprintf(tmp_tag, sizeof(tmp_tag), "use-Rlog/RLOG-%s", tag);
+	tag = tmp_tag;
     }
-
+#ifndef FAKE_LOG_DEVICE
+    /* check property for moving all RIL logs to main */
+    if (bufID == LOG_ID_RADIO) {
+	if ((__system_property_get("persist.ril.log",tmp_tag) > 0) &&
+		!strcmp(tmp_tag,"1"))
+	    bufID = LOG_ID_MAIN;
+    }
+#endif
 #if __BIONIC__
     if (prio == ANDROID_LOG_FATAL) {
         android_set_abort_message(msg);
@@ -581,3 +591,28 @@ LIBLOG_ABI_PUBLIC int __android_log_security_bswrite(int32_t tag,
 
     return write_to_log(LOG_ID_SECURITY, vec, 4);
 }
+
+#ifdef MTK_HARDWARE
+#ifndef __unused
+#define __unused  __attribute__((__unused__))
+#endif
+struct xlog_record {
+    const char *tag_str;
+    const char *fmt_str;
+    int prio;
+};
+
+LIBLOG_ABI_PUBLIC void __attribute__((weak)) __xlog_buf_printf(int bufid __unused, const struct xlog_record *xlog_record __unused, ...) {
+#ifndef FAKE_LOG_DEVICE
+    char prop[32]="0";
+    /* check property for diable all xlog */
+    __system_property_get("ro.disable.xlog",prop);
+    if (!strcmp(prop, "0"))
+#endif
+    {
+	va_list args;
+	va_start(args, xlog_record);
+	__android_log_vprint(xlog_record->prio, xlog_record->tag_str, xlog_record->fmt_str, args);
+    }
+}
+#endif
diff --git a/libnetutils/ifc_utils.c b/libnetutils/ifc_utils.c
index 7739cf459..002fdb65a 100644
--- a/libnetutils/ifc_utils.c
+++ b/libnetutils/ifc_utils.c
@@ -37,6 +37,7 @@
 #include <linux/ipv6_route.h>
 #include <linux/rtnetlink.h>
 #include <linux/sockios.h>
+#include <linux/un.h>
 
 #include "netutils/ifc.h"
 
@@ -737,3 +738,134 @@ ifc_configure(const char *ifname,
 
     return 0;
 }
+#ifdef MTK_HARDWARE
+static int ifc_netd_sock_init(void)
+{
+    int ifc_netd_sock;
+    const int one = 1;
+    struct sockaddr_un netd_addr;
+
+        ifc_netd_sock = socket(AF_UNIX, SOCK_STREAM, 0);
+        if (ifc_netd_sock < 0) {
+            printerr("ifc_netd_sock_init: create socket failed");
+            return -1;
+        }
+
+        setsockopt(ifc_netd_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one));
+        memset(&netd_addr, 0, sizeof(netd_addr));
+        netd_addr.sun_family = AF_UNIX;
+        strlcpy(netd_addr.sun_path, "/dev/socket/netd",
+            sizeof(netd_addr.sun_path));
+        if (TEMP_FAILURE_RETRY(connect(ifc_netd_sock,
+                     (const struct sockaddr*) &netd_addr,
+                     sizeof(netd_addr))) != 0) {
+            printerr("ifc_netd_sock_init: connect to netd failed, fd=%d, err: %d(%s)",
+                ifc_netd_sock, errno, strerror(errno));
+            close(ifc_netd_sock);
+            return -1;
+        }
+
+    if (DBG) printerr("ifc_netd_sock_init fd=%d", ifc_netd_sock);
+    return ifc_netd_sock;
+}
+
+/*do not call this function in netd*/
+int ifc_set_throttle(const char *ifname, int rxKbps, int txKbps)
+{
+    FILE* fnetd = NULL;
+    int ret = -1;
+    int seq = 1;
+    char rcv_buf[24];
+    int nread = 0;
+    int netd_sock = 0;
+
+    ALOGD("enter ifc_set_throttle: ifname = %s, rx = %d kbs, tx = %d kbs", ifname, rxKbps, txKbps);
+
+    netd_sock = ifc_netd_sock_init();
+    if(netd_sock <= 0)
+        goto exit;
+
+    // Send the request.
+    fnetd = fdopen(netd_sock, "r+");
+	if(fnetd == NULL){
+		ALOGE("open netd socket failed, err:%d(%s)", errno, strerror(errno));
+		goto exit;
+	}
+    if (fprintf(fnetd, "%d interface setthrottle %s %d %d", seq, ifname, rxKbps, txKbps) < 0) {
+        goto exit;
+    }
+    // literal NULL byte at end, required by FrameworkListener
+    if (fputc(0, fnetd) == EOF ||
+        fflush(fnetd) != 0) {
+        goto exit;
+    }
+    ret = 0;
+
+	//Todo: read the whole response from netd
+	nread = fread(rcv_buf, 1, 20, fnetd);
+	rcv_buf[23] = 0;
+	ALOGD("response: %s", rcv_buf);
+exit:
+    if (fnetd != NULL) {
+        fclose(fnetd);
+    }
+
+    return ret;
+}
+
+#define SIOCSTXQSTATE (SIOCDEVPRIVATE + 0)  //start/stop ccmni tx queue
+#define SIOCSCCMNICFG (SIOCDEVPRIVATE + 1)  //configure ccmni/md remapping
+
+int ifc_set_txq_state(const char *ifname, int state)
+{
+    struct ifreq ifr;
+    int ret, ctl_sock;
+
+    memset(&ifr, 0, sizeof(struct ifreq));
+    strncpy(ifr.ifr_name, ifname, IFNAMSIZ);
+    ifr.ifr_name[IFNAMSIZ - 1] = 0;
+    ifr.ifr_ifru.ifru_ivalue = state;
+
+    ctl_sock = socket(AF_INET, SOCK_DGRAM, 0);
+    if(ctl_sock < 0){
+	ALOGE("create ctl socket failed\n");
+	return -1;
+    }
+    ret = ioctl(ctl_sock, SIOCSTXQSTATE, &ifr);
+    if(ret < 0)
+	ALOGE("ifc_set_txq_state failed, err:%d(%s)\n", errno, strerror(errno));
+    else
+	ALOGI("ifc_set_txq_state as %d, ret: %d\n", state, ret);
+
+    close(ctl_sock);
+
+    return ret;
+}
+
+int ifc_ccmni_md_cfg(const char *ifname, int md_id)
+{
+    struct ifreq ifr;
+    int ret = 0;
+    int ctl_sock = 0;
+
+    ifc_init_ifr(ifname, &ifr);
+    ifr.ifr_ifru.ifru_ivalue = md_id;
+
+    ctl_sock = socket(AF_INET, SOCK_DGRAM, 0);
+    if(ctl_sock < 0){
+	printerr("ifc_ccmni_md_cfg: create ctl socket failed\n");
+	return -1;
+    }
+
+    if(ioctl(ctl_sock, SIOCSCCMNICFG, &ifr) < 0) {
+	printerr("ifc_ccmni_md_configure(ifname=%s, md_id=%d) error:%d(%s)",
+	ifname, md_id, errno, strerror(errno));
+	ret = -1;
+    } else {
+	printerr("ifc_ccmni_md_configure(ifname=%s, md_id=%d) OK", ifname, md_id);
+    }
+
+    close(ctl_sock);
+    return ret;
+}
+#endif
diff --git a/rootdir/init.usb.rc b/rootdir/init.usb.rc
index 915d159a5..0666e4d63 100644
--- a/rootdir/init.usb.rc
+++ b/rootdir/init.usb.rc
@@ -15,7 +15,7 @@ on post-fs-data
 service adbd /sbin/adbd --root_seclabel=u:r:su:s0
     class core
     socket adbd stream 660 system system
-    disabled
+    #disabled
     seclabel u:r:adbd:s0
 
 # adbd on at boot in emulator
